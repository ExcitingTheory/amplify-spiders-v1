type Mutation {
  crawlEngines(search: String, postalCode: String, domainID: String, apexDomain: String): String @function(name: "spiderEngines-${env}")
  crawlKeywords(search: String, url: String): String @function(name: "spiderKeywords-${env}")
  crawlWebs(url: String): String @function(name: "spiderWebs-${env}")
}

type WebResult {
  data: AWSJSON
  parsed: AWSJSON
  unstructured: String
  type: WEBCRAWLERS
}

type ParsedEngineResult {
  key: Int
  name: String
  score: Float
  websiteUrl: String
}

type ParsedEngineResultPromise {
  status: String
  reason: String 
  value: ParsedEngineResult
}

type EngineResultPromise {
  status: String
  reason: String
  value: EngineResult
}

type EngineResult {
  data: AWSJSON # Raw request data
  results: [ParsedEngineResultPromise] # parsed results
  highScore: Float
  foundWebsite: Boolean # Something matched a domain
  mostLikely: Int # key in results
  exactWebsiteMatch: Int # key in results
  exactWebsiteMatchHttp: Int # key in results
  exactNameMatch: Int # key in results
  rank: Int # where in the searched listings was the listing found
  type: ENGINECRAWLERS # Which search engine were the results from
}

enum ENGINECRAWLERS {
  KEYWORD_PLANNER
  GOOGLE
  FOURSQUARE
  FACEBOOK
  YELP
  INFOGROUP
  CITYSEARCH
  YELLOW_PAGES
}

enum WEBCRAWLERS {
  NU
  LIGHTHOUSE
  CUSTOM
}

type WebCrawl @model @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    ]) {
  id: ID!
  url: String
  domainID: ID! @index(name: "byDomain")
  custom: WebResult
  nu: WebResult
  lighthouse: WebResult
  owner: String
}

type EngineCrawl @model @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    ]) {
  id: ID!
  search: String
  domainID: ID! @index(name: "byDomain")
  postalCode: String
  keywordplanner: EngineResultPromise
  citysearch: EngineResultPromise
  google: EngineResultPromise
  foursquare: EngineResultPromise
  facebook: EngineResultPromise
  yelp: EngineResultPromise
  infogroup: EngineResultPromise
  yellowpages: EngineResultPromise
  owner: String
}

type Domain @model @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    ]) {
  id: ID!
  name: String
  owner: String
  EngineCrawls: [EngineCrawl] @hasMany(indexName: "byDomain", fields: ["id"])
  WebCrawls: [WebCrawl] @hasMany(indexName: "byDomain", fields: ["id"])
}
 