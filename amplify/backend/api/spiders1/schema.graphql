type Mutation {
  crawlEngines(search: String, postalCode: String): String @function(name: "spiderEngines-${env}")
  crawlKeywords(search: String, url: String): String @function(name: "spiderKeywords-${env}")
  crawlWebs(url: String): String @function(name: "spiderWebs-${env}")
}

type WebResult {
  data: AWSJSON
  parsed: AWSJSON
  unstructured: String
  search: String
  zipCode: Integer
  domain: String
  type: WEBCRAWLERS
}
    "highScore": 0.9523809523809523,
    "foundWebsite": true,
    "mostLikely": 2,
    "exactMatch": 0 }


type EngineResult {
  data: AWSJSON
  results: AWSJSON
  search: String
  zipCode: Integer
  highScore: Float
  foundWebsite: true
  domain: String
  rank: Integer
  type: ENGINECRAWLERS
}

enum ENGINECRAWLERS {
  KEYWORD_PLANNER
  GOOGLE
  FOURSQUARE
  FACEBOOK
  YELP
  INFOGROUP
  CITYSEARCH
  YELLOW_PAGES
}

enum WEBCRAWLERS {
  NU
  LIGHTHOUSE
  CUSTOM
}

type WebCrawl @model @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    ]) {
  id: ID!
  url: String
  dateTime: AWSDateTime
  domainID: ID! @index(name: "byDomain")
  custom: WebResult
  nu: WebResult
  lighthouse: WebResult
  owner: String
}

type EngineCrawl @model @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    ]) {
  id: ID!
  dateTime: AWSDateTime
  search: String
  domainID: ID! @index(name: "byDomain")
  zipCode: String
  keywordPlanner: EngineResult
  google: EngineResult
  foursquare: EngineResult
  facebook: EngineResult
  yelp: EngineResult
  infogroup: EngineResult
  yellowPages: EngineResult
  owner: String
}

type Domain @model @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    ]) {
  id: ID!
  name: String
  owner: String
  EngineCrawls: [EngineCrawl] @hasMany(indexName: "byDomain", fields: ["id"])
  WebCrawls: [WebCrawl] @hasMany(indexName: "byDomain", fields: ["id"])
}
 