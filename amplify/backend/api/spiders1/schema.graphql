type Mutation {
  crawlEnginesLanguage(search: String, postalCode: String, domainID: String, apexDomain: String): String @function(name: "spiderEnginesLanguage-${env}")
  crawlEngines(search: String, postalCode: String, domainID: String, apexDomain: String): String @function(name: "spiderEngines-${env}")
  crawlKeywords(search: String, url: String): String @function(name: "spiderKeywords-${env}")
  crawlWebs(url: String): String @function(name: "spiderWebs-${env}")
}

type WebResult {
  data: AWSJSON
  parsed: AWSJSON
  unstructured: String
}

# type Address {
#   city: String
#   postalCode: String
#   state: String
#   street: String
# }

type ParsedEngineResult {
  key: Int
  name: String
  score: Float
  websiteUrl: String
  address: String
}

type Coordinate {
  x: String
  y: Float
}

type Chart {
  id: String
  data: [Coordinate]
}

type EngineResult {
  results: [ParsedEngineResult] # parsed results
  bumpChart: [Chart]
  heatmapChart: [Chart]
  highScore: Float
  foundWebsite: Boolean # Something matched a domain
  mostLikely: Int # key in results
  exactWebsiteMatch: Int # key in results
  exactWebsiteMatchHttp: Int # key in results
  exactNameMatch: Int # key in results
}

type WebCrawl @model @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    ]) {
  id: ID!
  url: String
  domainID: ID! @index(name: "byDomain")
  custom: WebResult
  nu: WebResult
  lighthouse: WebResult
  owner: String
}

type EngineCrawl @model @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    ]) {
  id: ID!
  search: String
  domainID: ID! @index(name: "byDomain")
  postalCode: String
  keywordplanner: EngineResult
  citysearch: EngineResult
  google: EngineResult
  foursquare: EngineResult
  facebook: EngineResult
  yelp: EngineResult
  infogroup: EngineResult
  yellowpages: EngineResult
  owner: String
}

type Domain @model @auth(
    rules: [
      # { allow: private, provider: iam }
      { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    ]) {
  id: ID!
  name: String
  owner: String
  EngineCrawls: [EngineCrawl] @hasMany(indexName: "byDomain", fields: ["id"])
  WebCrawls: [WebCrawl] @hasMany(indexName: "byDomain", fields: ["id"])
}
 